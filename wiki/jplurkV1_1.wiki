#summary version 1.1
#labels Featured,Phase-Implementation

= JPkurk 1.1 簡介 =

JPlurk 1.1 版是開發中的版本，以 1.0 版為基礎在架構上增加可擴充的設計。
我們將 JPlurk 的實作區分為：

  * 網路溝通的底層 (一般來說，開發者也不會修改到它)
  * Plurk 操作行為 (開發者能擴充新的操作行為)
  * Plurk 代理人 (能加上提供一般使用者使用的行為)


對使用者來說，它只需要會使用 Plurk 代理人即可：

{{{
// 透過 jvm 動態參數建立 Account 物件
// 例如：-Dplurk.user=your_account -Dplurk.passwd=your_passwd
IPlurkAgent agent = new PlurkAgent(Account.createWithDynamicProperties());

// 執行登入
agent.login();

// 顯示未讀取的 plurk
Result result = agent.getUnreadPlurks();
}}}

對開發著來說，他可以實作 Plurk 操作行為，並擴充至 IPlurkAgent 內。每個操作行為必需實作 com.googlecode.jplurk.behavior.IBehavior：
{{{
public interface IBehavior {
	public boolean action(final Request params, Object arg);
}
}}}

Request 參數是用來執行 Http Request 使用的參數，基本上它內含 Map 物件存放實際的參數。除此之外，它還有 EndPoint 與 User UID 欄位，是發送請求實必填的。但開發者只需要填入 EndPoint 即可，因為 User UID 欄位的內容會在使用者執行 Login 後獲得，並在發送 Request 前自動填上。

以 com.googlecode.jplurk.behavior.GetUnreadPlurks 為例，要取得未讀取 Plurk 的 EndPoint 為 (/TimeLine/getUnreadPlurks 已定義在 Constants.GET_UNREAD_PLURK_URL)，它的實作如下：
{{{
public class GetUnreadPlurks implements IBehavior{

	@Override
	public boolean action(Request params, Object arg) {
		params.setEndPoint(Constants.GET_UNREAD_PLURK_URL);
		params.addParam("fetch_responses", "false");
		return true;
	}

}
}}}

對任何的 IBehavior 來說，它會以下列的方式執行：
{{{
protected Result execute(Class<? extends IBehavior> clazz, Object args){
	if(!isLogin) {
		throw new NotLoginException();
	}

	Result result = plurkTemplate.doAction(clazz, args);

	if(!result.isOk()){
		throw new RequestFailureException();
	}
	return result;
}
}}}

由 IBehavior 執行的實作，開發者須注意：

  * 所有的 IBehavior 必需在登入的狀態執行 (即為獲得合法的 User UID 後。)
  * IBehavior 是執行時才動態建立的。因為，我們希望它是無狀態的，在設計上利用建立的方式作為限制的手段。


= JPkurk 1.1 功能列表 =

|| 功能 || 函式名稱與參數 || 備註 ||
|| 登入 || login() || 其他功能都必需在登入後執行 ||
|| 發送「長」噗 || addLongPlurk(Qualifier qualifier, String longText) || 範例： http://www.plurk.com/p/275fco ||
|| 發噗 || addPlurk(Qualifier qualifier, String text) || ||
|| 同意交友申請 || allowFriendRequest(int uid) || ||
|| 拒絕交友申請 || denyFriendRequest(int uid) || ||
|| 編輯噗文 || editPlurk(String plurkId, String message) || ||
|| 取得通知 || getNotifications() || ||
|| 取得噗文 || getPlurks() || 目前尚未實作指定區間 ||
|| 取得回應過的噗文 || getResponsePlurks(Integer plurkId) || ||
|| 取得未讀取的噗文 || getUnreadPlurks() || ||
|| 回應噗文 || responsePlurk(Qualifier qualifier, String plurkId, String plurkOwnerId, String text) || ||

== 回應內容 Result ==

多數的 Plurk 功能都會回傳 Result 物件：
{{{
package com.googlecode.jplurk.net;

import java.util.HashMap;
import java.util.Map;

public class Result {

	public final static Result FAILURE_RESULT = new Result() {
		{
			setOk(false);
		}
	};

	private boolean ok;
	private String responseBody;

	@SuppressWarnings("unchecked")
	private Map attachment = new HashMap();

	public boolean isOk() {
		return ok;
	}

	public void setOk(boolean ok) {
		this.ok = ok;
	}

	public String getResponseBody() {
		return responseBody;
	}

	public void setResponseBody(String responseBody) {
		this.responseBody = responseBody;
	}

	@Override
	public String toString() {
		return String.format("isOk: %s, attachment: %s\nresponse: %s", isOk(), attachment, responseBody);
	}

	@SuppressWarnings("unchecked")
	public Map getAttachement(){
		return attachment;
	}

}
}}}

您可以使用 isOk() 判斷執行是否成功，並利用 getResponseBody() 取得回應原始內容。除此之外，我們亦提供 getAttachement() 放置「加工」過的資料，像是把轉換後的 json 放在它裡面。

*美中不足的地方是，目前尚未統一 getAttachement() 的資料格式* 您可能需要先查詢一下 javadoc 或 source code 才能知道實際能取得的內容。


= 下載與使用 =

您可以在 [http://jplurk.googlecode.com/files/jPlurk-1.1-20091016.jar 下載] jplurk 1.1 beta 的 binary jar 檔。除了下載 jplurk 之外，您尚需要下載相依的套件使用：

  * [http://commons.apache.org/ Jakarta Commons]
    * commons-lang-2.x.jar
    * commons-logging-1.x.jar 
    * commons-httpclient-3.x.jar
      * commons-codec-1.x.jar 
  * [http://code.google.com/p/json-simple/ json_simple-1.x.jar]