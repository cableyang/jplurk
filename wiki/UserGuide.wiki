#summary User Guide for jPlurk version 2.x / jPlurk version 2.x 使用指引
#labels Featured

= Hello jPlurk =

There is a simple example to get the user's profile:
 * creates the ISettings instance used by !PlurkClient
 * does login user before use other api commands the !PlurkClient provided
 * executes getownProfile() for example 

{{{
// create settings from ${USER_HOME}/jplurk.properties
ISettings settings = new PlurkSettings();
PlurkClient client = new PlurkClient(settings);

// sign in the plurk account
client.login("[user_id]", "[user_password]");

// get user's profile
JSONObject profile = client.getOwnProfile();
}}}

== About ISettings ==

ISettings is an interface which provides the information about the api key, default lang, etc. !PlurkClient will pick up ISettings to initialize itself.
We provide com.google.jplurk.!PlurkSettings and com.google.jplurk.ISettings.Simple classes. 
!PlurkSettings instantiates from a external property file. 
ISettings.Simple instantiates by arguments:

{{{
ISettings.Simple settings = new Simple("[api_key]", Lang.tr_ch);
}}}

ISettings.Simple is useful for programming without the config file (~/jplurk.properties), especially in *Android* . There is an Activity example:
{{{
package android.jplurk;

import android.app.Activity;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

import com.google.jplurk.ISettings;
import com.google.jplurk.Lang;
import com.google.jplurk.PlurkClient;

public class JPluroidActivity extends Activity {

    private final static String API_KEY = "[your-api-key]";
    private final static String TAG = "JPluroid";
    //
    private String __user = "[your-plurk-account]";
    private String __passwd = "[your-plurk-password]";
    //
    private PlurkClient mPlurkClient;
    private boolean mHasLogin;

    class PlurkAsync extends AsyncTask<PlurkClient, Void, Boolean> {

        @Override
        protected Boolean doInBackground(PlurkClient... params) {
            Log.i(TAG, "start to login");
            PlurkClient client = params[0];
            try {
                Object result = client.login(__user, __passwd);
                Log.i(TAG, "logging result: " + result);
                return result != null;
            } catch (Exception e) {
                Log.e(TAG, e.getMessage());
                return false;
            }

        }

        @Override
        protected void onPostExecute(Boolean result) {
            Log.i(TAG, "finish logging task");
            toast("logging is " + (result ? "success" : "failed"));
            if (result) {
                mHasLogin = true;
                Log.i(TAG, "mark plurk-client has logined");
            } 
        }
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mPlurkClient = new PlurkClient(new ISettings.Simple(API_KEY, Lang.tr_ch));
        setContentView(R.layout.main);
    }

    @Override
    protected void onResume() {
        super.onResume();
        if (!mHasLogin) {
            toast("do logging ...");
            new PlurkAsync().execute(mPlurkClient);
        }
    }

    private void toast(Object message) {
        Toast.makeText(this, "" + message, Toast.LENGTH_LONG).show();
    }
}

}}}

= Using jPlurk with Proxy =

    please refer to: http://code.google.com/p/jplurk/wiki/Using_Proxy_V2
    
= Using Realtime API =

    In r443, we implement the [http://www.plurk.com/API#realtime Realtime notifications] api.
    The /API/Realtime/getUserChannel api will return a comet server url and inovke HTTP GET to get notifications.
    In jPlurk, we use event-listener model to design it.
    
{{{
PlurkNotifier notifier = client.getUserChannel();
notifier.addNotificationListener(new NotificationListener() {
    @Override
    public void onNotification(JSONObject message) throws Exception {
        // do something with notification
    }
});

// PlurkNotifer is a subclass of TimerTask.
// You can schedule it in Timer Thread.
Timer timer = new Timer();
timer.schedule(notifier, new Date(), 10 * 1000);
}}}